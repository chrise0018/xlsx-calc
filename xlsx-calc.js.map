{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/RawValue.js","webpack:///./src/int_2_col_str.js","webpack:///./src/col_str_2_int.js","webpack:///./src/Range.js","webpack:///./src/getSanitizedSheetName.js","webpack:///./src/str_2_val.js","webpack:///./src/RefValue.js","webpack:///./src/find_all_cells_with_formulas.js","webpack:///./src/index.js","webpack:///./src/exec_formula.js","webpack:///./src/expression_builder.js","webpack:///./src/Exp.js","webpack:///./src/LazyValue.js","webpack:///./src/UserFnExecutor.js","webpack:///./src/UserRawFnExecutor.js","webpack:///./src/formulas.js","webpack:///./src/formulas-raw.js","webpack:///./src/Calculator.js"],"names":["root","factory","exports","module","define","amd","a","i","this","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","setValue","v","calc","modulo","dividend","columnName","guard","String","fromCharCode","col_str","colstr","replace","length","Math","pow","charCodeAt","col_str_2_int","int_2_col_str","getSanitizedSheetName","str_expression","formula","range_expression","sheet_name","sheet","indexOf","aux","split","wb","Sheets","max_row","arr","min_row","parseInt","str_max_row","min_col","max_col","matrix","row","push","j","cell_name","cell_full_name","formula_ref","status","exec_formula","Error","quotedMatch","match","RawValue","RefValue","LazyValue","Range","str_2_val","buffer","isNaN","trim","inner","substr","self","parseRef","resolved_ref","ref_cell","console","log","w","cells","f","cell","find_all_cells_with_formulas","Calculator","mymodule","workbook","formulas","calculator","set_fx","exec_fx","import_functions","import_raw_functions","xlsx_Fx","localizeFunctions","XLSX_CALC","expression_builder","xlsx_raw_Fx","functions","opts","formulajs","prefix","obj","override","my_assign","dest","source","JSON","parse","stringify","k","build_expression","update_cell_value","fn","args","apply","dic","newName","oldName","Exp","UserFnExecutor","UserRawFnExecutor","common_operations","*","+","-","/","^","&","<",">","=","root_exp","str_formula","exp_obj","was_string","fn_stack","exp","string","char","state","start","single_quote","trim_buffer","special","special_raw","ini_parentheses","stack","pop","end_parentheses","add_operation","MS_PER_DAY","exp_id","last_arg","isEmpty","undefined","checkVariable","exec","op","splice","e","id","Array","isArray","errorValues","#NULL!","#DIV/0!","#VALUE!","#REF!","#NAME?","#NUM!","#N/A","#GETTING_DATA","message","concat","b","Date","exec_minus","getTime","toLowerCase","user_function","result","map","FLOOR","floor","_xlfn.FLOOR.MATH","ABS","abs","SQRT","sqrt","VLOOKUP","return_index","MAX","max","arguments","arg","col","SUM","sum","MIN","min","CONCATENATE","PMT","rate_per_period","number_of_payments","present_value","future_value","type","q","COUNTA","counta","IRR","range","guess","guest","NPV","NORM.INV","normsInv","_xlfn.NORM.INV","STDEV","array","getArrayOfNumbers","mean","reduce","_mean","dev","itm","AVERAGE","avg","EXP","E","LN","_xlfn.VAR.P","var_p","VAR.P","_xlfn.COVARIANCE.P","covariance_p","COVARIANCE.P","TRIM","LEN","ISBLANK","is_blank","HLOOKUP","needle","table","index","exactmatch","searchingFor","INDEX","row_num","column_num","MATCH","lookupValue","matchType","idx","match_exactly_string","match_exactly_non_string","indexValue","match_less_than_or_equal","match_greater_than_or_equal","SUMPRODUCT","parseNumber","parseFloat","matrixArray","getRowCount","getColCount","rowCount","colCount","consistentSizeRanges","product","_i","_ij","arrays","ISNUMBER","x","TODAY","today","setHours","ISERROR","TIME","hours","minutes","seconds","DAY","date","getDate","day","MONTH","getMonth","month","YEAR","getFullYear","year","RIGHT","text","number","substring","LEFT","IFS","cond","val","ROUND","decimalPlaces","round","roundMeasure","CORREL","inv_n","avg_a","avg_b","sa","sb","SUMIF","elementToSum","sumResult","slice","forEach","elt","CHOOSE","option","SUBSTITUTE","old_text","new_text","occurrence","RegExp","average","mu","sigma","Infinity","OFFSET","cell_ref","rows","columns","height","width","ref_value","parsed_ref","end_range","IFERROR","onerrorvalue","IF","condition","_then","_else","AND","OR","TRANSPOSE","expressionWithRange","colRow","colNumber","rowNumber","matrixRow","destinationColumn","destinationRow","[object Object]","expressions","variables","calcNames","var_name","variable","setVarOfExpression","vars","Workbook","Names","item","getRef","Ref","Name","ref_name"],"mappings":"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","file":"xlsx-calc.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","\"use strict\";\n\nmodule.exports = function RawValue(value) {\n    this.setValue = function(v) {\n        value = v;\n    };\n    this.calc = function() {\n        return value;\n    };\n};\n","\"use strict\";\n\nmodule.exports = function int_2_col_str(n) {\n    var dividend = n + 1;\n    var columnName = '';\n    var modulo;\n    var guard = 10;\n    while (dividend > 0 && guard--) {\n        modulo = (dividend - 1) % 26;\n        columnName = String.fromCharCode(modulo + 65) + columnName;\n        dividend = (dividend - modulo - 1) / 26;\n    }\n    return columnName;\n};","\"use strict\";\n\nmodule.exports = function col_str_2_int(col_str) {\n    var r = 0;\n    var colstr = col_str.replace(/[0-9]+$/, '');\n    for (var i = colstr.length; i--;) {\n        r += Math.pow(26, colstr.length - i - 1) * (colstr.charCodeAt(i) - 64);\n    }\n    return r - 1;\n};","\"use strict\";\n\nconst col_str_2_int = require('./col_str_2_int.js');\nconst int_2_col_str = require('./int_2_col_str.js');\nconst getSanitizedSheetName = require('./getSanitizedSheetName.js');\n\nmodule.exports = function Range(str_expression, formula) {\n    this.calc = function() {\n        var range_expression, sheet_name, sheet;\n        if (str_expression.indexOf('!') != -1) {\n            var aux = str_expression.split('!');\n            sheet_name = getSanitizedSheetName(aux[0]);\n            range_expression = aux[1];\n        }\n        else {\n            sheet_name = formula.sheet_name;\n            range_expression = str_expression;\n        }\n        sheet = formula.wb.Sheets[sheet_name];\n        var arr = range_expression.split(':');\n        var min_row = parseInt(arr[0].replace(/^[A-Z]+/, ''), 10) || 0;\n        var str_max_row = arr[1].replace(/^[A-Z]+/, '');\n        var max_row;\n        if (str_max_row === '' && sheet['!ref']) {\n            str_max_row = sheet['!ref'].split(':')[1].replace(/^[A-Z]+/, '');\n        }\n        // the max is 1048576, but TLE\n        max_row = parseInt(str_max_row == '' ? '500000' : str_max_row, 10);\n        var min_col = col_str_2_int(arr[0]);\n        var max_col = col_str_2_int(arr[1]);\n        var matrix = [];\n        for (var i = min_row; i <= max_row; i++) {\n            var row = [];\n            matrix.push(row);\n            for (var j = min_col; j <= max_col; j++) {\n                var cell_name = int_2_col_str(j) + i;\n                var cell_full_name = sheet_name + '!' + cell_name;\n                if (formula.formula_ref[cell_full_name]) {\n                    if (formula.formula_ref[cell_full_name].status === 'new') {\n                        formula.exec_formula(formula.formula_ref[cell_full_name]);\n                    }\n                    else if (formula.formula_ref[cell_full_name].status === 'working') {\n                        throw new Error('Circular ref');\n                    }\n                    if (sheet[cell_name].t === 'e') {\n                        row.push(sheet[cell_name]);\n                    }\n                    else {\n                        row.push(sheet[cell_name].v);\n                    }\n                }\n                else if (sheet[cell_name]) {\n                    if (sheet[cell_name].t === 'e') {\n                        row.push(sheet[cell_name]);\n                    }\n                    else {\n                        row.push(sheet[cell_name].v);\n                    }\n                }\n                else {\n                    row.push(null);\n                }\n            }\n        }\n        return matrix;\n    };\n};\n","\"use strict\";\n\nmodule.exports = function getSanitizedSheetName(sheet_name) {\n    var quotedMatch = sheet_name.match(/^'(.*)'$/);\n    if (quotedMatch) {\n        return quotedMatch[1];\n    }\n    else {\n        return sheet_name;\n    }\n};\n","const RawValue = require('./RawValue.js');\nconst RefValue = require('./RefValue.js');\nconst LazyValue = require('./LazyValue.js');\nconst Range = require('./Range.js');\n\nmodule.exports = function str_2_val(buffer, formula) {\n    if (!isNaN(buffer)) {\n        return new RawValue(+buffer);\n    }\n    if (buffer === 'TRUE') {\n        return new RawValue(1);\n    }\n    if (typeof buffer !== 'string') {\n        return buffer;\n    }\n\n    buffer = buffer.trim().replace(/\\$/g, '')\n\n    if (buffer.match(/^[A-Z]+[0-9]+:[A-Z]+[0-9]+$/)) {\n        return new Range(buffer, formula);\n    }\n    if (buffer.match(/^[^!]+![A-Z]+[0-9]+:[A-Z]+[0-9]+$/)) {\n        return new Range(buffer, formula);\n    }\n    if (buffer.match(/^[A-Z]+:[A-Z]+$/)) {\n        return new Range(buffer, formula);\n    }\n    if (buffer.match(/^[^!]+![A-Z]+:[A-Z]+$/)) {\n        return new Range(buffer, formula);\n    }\n    if (buffer.match(/^[A-Z]+[0-9]+$/)) {\n        return new RefValue(buffer, formula);\n    }\n    if (buffer.match(/^[^!]+![A-Z]+[0-9]+$/)) {\n        return new RefValue(buffer, formula);\n    }\n    if (buffer.match(/%$/)) {\n        var inner = str_2_val(buffer.substr(0, buffer.length-1), formula)\n        return new LazyValue(() => inner.calc() / 100)\n    }\n    return buffer;\n};\n","\"use strict\";\n\nconst getSanitizedSheetName = require('./getSanitizedSheetName.js');\n\nmodule.exports = function RefValue(str_expression, formula) {\n    var self = this;\n    this.name = 'RefValue';\n    this.str_expression = str_expression;\n    this.formula = formula;\n\n    self.parseRef = function() {\n        var sheet, sheet_name, cell_name, cell_full_name;\n        if (str_expression.indexOf('!') != -1) {\n            var aux = str_expression.split('!');\n            sheet_name = getSanitizedSheetName(aux[0]);\n            sheet = formula.wb.Sheets[sheet_name];\n            cell_name = aux[1];\n        }\n        else {\n            sheet = formula.sheet;\n            sheet_name = formula.sheet_name;\n            cell_name = str_expression;\n        }\n        if (!sheet) {\n            throw Error(\"Sheet \" + sheet_name + \" not found.\");\n        }\n        cell_full_name = sheet_name + '!' + cell_name;\n        return {\n            sheet: sheet,\n            sheet_name: sheet_name,\n            cell_name: cell_name,\n            cell_full_name: cell_full_name\n        };\n    };\n\n    this.calc = function() {\n        var resolved_ref = self.parseRef();\n        var sheet = resolved_ref.sheet;\n        var cell_name = resolved_ref.cell_name;\n        var cell_full_name = resolved_ref.cell_full_name;\n        var ref_cell = sheet[cell_name];\n        if (!ref_cell) {\n            return null;\n        }\n        var formula_ref = formula.formula_ref[cell_full_name];\n        if (formula_ref) {\n            if (formula_ref.status === 'new') {\n                formula.exec_formula(formula_ref);\n                if (ref_cell.t === 'e') {\n                    console.log('ref is an error with new formula', cell_full_name, ref_cell.w);\n                    throw new Error(ref_cell.w);\n                }\n                return ref_cell.v;\n            }\n            else if (formula_ref.status === 'working') {\n                throw new Error('Circular ref');\n            }\n            else if (formula_ref.status === 'done') {\n                if (ref_cell.t === 'e') {\n                    console.log('ref is an error after formula eval', cell_full_name, ref_cell.w);\n                    throw new Error(ref_cell.w);\n                }\n                return ref_cell.v;\n            }\n        }\n        else {\n            if (ref_cell.t === 'e') {\n                console.log('ref is an error with no formula', cell_name);\n                throw new Error(ref_cell.w);\n            }\n            return ref_cell.v;\n        }\n    };\n};\n","\"use strict\";\n\nmodule.exports = function find_all_cells_with_formulas(wb, exec_formula) {\n    let formula_ref = {};\n    let cells = [];\n    for (let sheet_name in wb.Sheets) {\n        let sheet = wb.Sheets[sheet_name];\n        for (let cell_name in sheet) {\n            if (sheet[cell_name] && sheet[cell_name].f) {\n                let formula = formula_ref[sheet_name + '!' + cell_name] = {\n                    formula_ref: formula_ref,\n                    wb: wb,\n                    sheet: sheet,\n                    sheet_name: sheet_name,\n                    cell: sheet[cell_name],\n                    name: cell_name,\n                    status: 'new',\n                    exec_formula: exec_formula\n                };\n                cells.push(formula);\n            }\n        }\n    }\n    return cells;\n};\n","\"use strict\";\n\nconst int_2_col_str = require('./int_2_col_str.js');\nconst col_str_2_int = require('./col_str_2_int.js');\nconst exec_formula = require('./exec_formula.js');\nconst find_all_cells_with_formulas = require('./find_all_cells_with_formulas.js');\nconst Calculator = require('./Calculator.js');\n\nvar mymodule = function(workbook) {\n    var formulas = find_all_cells_with_formulas(workbook, exec_formula);\n    for (var i = formulas.length - 1; i >= 0; i--) {\n        exec_formula(formulas[i]);\n    }\n};\n\nmymodule.calculator = function calculator(workbook) {\n    return new Calculator(workbook, exec_formula);\n};\n\nmymodule.set_fx = exec_formula.set_fx;\nmymodule.exec_fx = exec_formula.exec_fx;\nmymodule.col_str_2_int = col_str_2_int;\nmymodule.int_2_col_str = int_2_col_str;\nmymodule.import_functions = exec_formula.import_functions;\nmymodule.import_raw_functions = exec_formula.import_raw_functions;\nmymodule.xlsx_Fx = exec_formula.xlsx_Fx;\nmymodule.localizeFunctions = exec_formula.localizeFunctions;\n\nmymodule.XLSX_CALC = mymodule\n\nmodule.exports = mymodule;\n","\"use strict\";\n\nconst expression_builder = require('./expression_builder.js');\n\nlet xlsx_Fx = {};\nlet xlsx_raw_Fx = {};\n\nimport_functions(require('./formulas.js'));\nimport_raw_functions(require('./formulas-raw.js'));\n\nfunction import_raw_functions(functions, opts) {\n    for (var key in functions) {\n        xlsx_raw_Fx[key] = functions[key];\n    }\n}\n\nfunction import_functions(formulajs, opts) {\n    opts = opts || {};\n    var prefix = opts.prefix || '';\n    for (var key in formulajs) {\n        var obj = formulajs[key];\n        if (typeof(obj) === 'function') {\n            if (opts.override || !xlsx_Fx[prefix + key]) {\n                xlsx_Fx[prefix + key] = obj;\n            }\n            // else {\n            //     console.log(prefix + key, 'already exists.');\n            //     console.log('  to override:');\n            //     console.log('    XLSX_CALC.import_functions(yourlib, {override: true})');\n            // }\n        }\n        else if (typeof(obj) === 'object') {\n            import_functions(obj, my_assign(opts, { prefix: key + '.' }));\n        }\n    }\n}\n\nfunction my_assign(dest, source) {\n    var obj = JSON.parse(JSON.stringify(dest));\n    for (var k in source) {\n        obj[k] = source[k];\n    }\n    return obj;\n}\n\nfunction build_expression(formula) {\n    return expression_builder(formula, {xlsx_Fx: xlsx_Fx, xlsx_raw_Fx: xlsx_raw_Fx});\n}\n\nfunction exec_formula(formula) {\n    let root_exp = build_expression(formula);\n    root_exp.update_cell_value();\n}\n\nexec_formula.set_fx = function set_fx(name, fn) {\n    xlsx_Fx[name] = fn;\n};\n\nexec_formula.exec_fx = function exec_fx(name, args) {\n    return xlsx_Fx[name].apply(this, args);\n};\n\nexec_formula.localizeFunctions = function(dic) {\n    for (let newName in dic) {\n        let oldName = dic[newName];\n        if (xlsx_Fx[oldName]) {\n            xlsx_Fx[newName] = xlsx_Fx[oldName];\n        }\n        if (xlsx_raw_Fx[oldName]) {\n            xlsx_raw_Fx[newName] = xlsx_raw_Fx[oldName];\n        }\n    }\n};\n\nexec_formula.import_functions = import_functions;\nexec_formula.import_raw_functions = import_raw_functions;\nexec_formula.build_expression = build_expression;\nexec_formula.xlsx_Fx = xlsx_Fx;\nmodule.exports = exec_formula;\n","const Exp = require('./Exp.js');\nconst RawValue = require('./RawValue.js');\nconst UserFnExecutor = require('./UserFnExecutor.js');\nconst UserRawFnExecutor = require('./UserRawFnExecutor.js');\nconst common_operations = {\n    '*': 'multiply',\n    '+': 'plus',\n    '-': 'minus',\n    '/': 'divide',\n    '^': 'power',\n    '&': 'concat',\n    '<': 'lt',\n    '>': 'gt',\n    '=': 'eq'\n};\n\nmodule.exports = function expression_builder(formula, opts) {\n    formula.status = 'working';\n\n    var xlsx_Fx = opts.xlsx_Fx || {};\n    var xlsx_raw_Fx = opts.xlsx_raw_Fx || {};\n\n    var root_exp;\n    var str_formula = formula.cell.f;\n    if (str_formula[0] == '=') {\n        str_formula = str_formula.substr(1);\n    }\n    var exp_obj = root_exp = new Exp(formula);\n    var buffer = '',\n        was_string = false;\n    var fn_stack = [{\n        exp: exp_obj\n    }];\n\n    /**\n     * state pattern in functional way\n     */\n    function string(char) {\n        if (char === '\"') {\n            exp_obj.push(new RawValue(buffer));\n            was_string = true;\n            buffer = '';\n            state = start;\n        } else {\n            buffer += char;\n        }\n    }\n\n    function single_quote(char) {\n        if (char === \"'\") {\n            state = start;\n        }\n        buffer += char;\n    }\n\n    function ini_parentheses() {\n        var o, trim_buffer = buffer.trim(),\n            special = xlsx_Fx[trim_buffer];\n        var special_raw = xlsx_raw_Fx[trim_buffer];\n        if (special_raw) {\n            special = new UserRawFnExecutor(special_raw, formula);\n        }\n        else if (special) {\n            special = new UserFnExecutor(special, formula);\n        }\n        else if (trim_buffer) {\n            //Error: \"Worksheet 1\"!D145: Function INDEX not found\n            throw new Error('\"' + formula.sheet_name + '\"!' + formula.name + ': Function ' + buffer + ' not found');\n        }\n        o = new Exp(formula);\n        fn_stack.push({\n            exp: o,\n            special: special\n        });\n        exp_obj = o;\n        buffer = '';\n    }\n\n    function end_parentheses() {\n        var v, stack = fn_stack.pop();\n        exp_obj = stack.exp;\n        exp_obj.push(buffer);\n        v = exp_obj;\n        buffer = '';\n        exp_obj = fn_stack[fn_stack.length - 1].exp;\n        if (stack.special) {\n            stack.special.push(v);\n            exp_obj.push(stack.special);\n        }\n        else {\n            exp_obj.push(v);\n        }\n    }\n\n    function add_operation(char) {\n        if (!was_string) {\n            exp_obj.push(buffer);\n        }\n        was_string = false;\n        exp_obj.push(char);\n        buffer = '';\n    }\n\n    function start(char) {\n        if (char === '\"') {\n            state = string;\n            buffer = '';\n        } else if (char === \"'\") {\n            state = single_quote;\n            buffer = \"'\";\n        } else if (char === '(') {\n            ini_parentheses();\n        } else if (char === ')') {\n            end_parentheses();\n        } else if (common_operations[char]) {\n            add_operation(char);\n        } else if (char === ',' && fn_stack[fn_stack.length - 1].special) {\n            was_string = false;\n            fn_stack[fn_stack.length - 1].exp.push(buffer);\n            fn_stack[fn_stack.length - 1].special.push(fn_stack[fn_stack.length - 1].exp);\n            fn_stack[fn_stack.length - 1].exp = exp_obj = new Exp(formula);\n            buffer = '';\n        } else {\n            buffer += char;\n        }\n    }\n    \n    var state = start;\n\n    for (var i = 0; i < str_formula.length; i++) {\n        state(str_formula[i]);\n    }\n    root_exp.push(buffer);\n    return root_exp;\n\n}","\"use strict\";\n\nconst RawValue = require('./RawValue.js');\nconst Range = require('./Range.js');\nconst str_2_val = require('./str_2_val.js');\n\nconst MS_PER_DAY = 24 * 60 * 60 * 1000;\n\nvar exp_id = 0;\n\nmodule.exports = function Exp(formula) {\n    var self = this;\n    self.id = ++exp_id;\n    self.args = [];\n    self.name = 'Expression';\n    self.update_cell_value = update_cell_value;\n    self.formula = formula;\n    \n    function update_cell_value() {\n        try {\n            if (Array.isArray(self.args) \n                    && self.args.length === 1\n                    && self.args[0] instanceof Range) {\n                throw Error('#VALUE!');\n            }\n            formula.cell.v = self.calc();\n            if (typeof(formula.cell.v) === 'string') {\n                formula.cell.t = 's';\n            }\n            else if (typeof(formula.cell.v) === 'number') {\n                formula.cell.t = 'n';\n            }\n        }\n        catch (e) {\n            var errorValues = {\n                '#NULL!': 0x00,\n                '#DIV/0!': 0x07,\n                '#VALUE!': 0x0F,\n                '#REF!': 0x17,\n                '#NAME?': 0x1D,\n                '#NUM!': 0x24,\n                '#N/A': 0x2A,\n                '#GETTING_DATA': 0x2B\n            };\n            if (errorValues[e.message] !== undefined) {\n                formula.cell.t = 'e';\n                formula.cell.w = e.message;\n                formula.cell.v = errorValues[e.message];\n            }\n            else {\n                throw e;\n            }\n        }\n        finally {\n            formula.status = 'done';\n        }\n    }\n    function isEmpty(value) {\n        return value === undefined || value === null || value === \"\";\n    }\n    \n    function checkVariable(obj) {\n        if (typeof obj.calc !== 'function') {\n            throw new Error('Undefined ' + obj);\n        }\n    }\n    \n    function exec(op, args, fn) {\n        for (var i = 0; i < args.length; i++) {\n            if (args[i] === op) {\n                try {\n                    if (i===0 && op==='+') {\n                        checkVariable(args[i + 1]);\n                        let r = args[i + 1].calc();\n                        args.splice(i, 2, new RawValue(r));\n                    } else {\n                        checkVariable(args[i - 1]);\n                        checkVariable(args[i + 1]);\n                        let r = fn(args[i - 1].calc(), args[i + 1].calc());\n                        args.splice(i - 1, 3, new RawValue(r));\n                        i--;\n                    }\n                }\n                catch (e) {\n                    // console.log('[Exp.js] - ' + formula.name + ': evaluating ' + formula.cell.f + '\\n' + e.message);\n                    throw e;\n                }\n            }\n        }\n    }\n\n    function exec_minus(args) {\n        for (var i = args.length; i--;) {\n            if (args[i] === '-') {\n                checkVariable(args[i + 1]);\n                var b = args[i + 1].calc();\n                if (i > 0 && typeof args[i - 1] !== 'string') {\n                    args.splice(i, 1, '+');\n                    if (b instanceof Date) {\n                        b = Date.parse(b);\n                        checkVariable(args[i - 1]);\n                        var a = args[i - 1].calc();\n                        if (a instanceof Date) {\n                            a = Date.parse(a) / MS_PER_DAY;\n                            b = b / MS_PER_DAY;\n                            args.splice(i - 1, 1, new RawValue(a));\n                        }\n                    }\n                    args.splice(i + 1, 1, new RawValue(-b));\n                }\n                else {\n                    if (typeof b === 'string') {\n                        throw new Error('#VALUE!');\n                    }\n                    args.splice(i, 2, new RawValue(-b));\n                }\n            }\n        }\n    }\n\n    self.calc = function() {\n        let args = self.args.concat();\n        exec_minus(args);\n        exec('^', args, function(a, b) {\n            return Math.pow(+a, +b);\n        });\n        exec('/', args, function(a, b) {\n            if (b == 0) {\n                throw Error('#DIV/0!');\n            }\n            return (+a) / (+b);\n        });\n        exec('*', args, function(a, b) {\n            return (+a) * (+b);\n        });\n        exec('+', args, function(a, b) {\n            if (a instanceof Date && typeof b === 'number') {\n                b = b * MS_PER_DAY;\n            }\n            return (+a) + (+b);\n        });\n        exec('&', args, function(a, b) {\n            return '' + a + b;\n        });\n        exec('<', args, function(a, b) {\n            return a < b;\n        });\n        exec('>', args, function(a, b) {\n            return a > b;\n        });\n        exec('>=', args, function(a, b) {\n            return a >= b;\n        });\n        exec('<=', args, function(a, b) {\n            return a <= b;\n        });\n        exec('<>', args, function(a, b) {\n            if (a instanceof Date && b instanceof Date) {\n                return a.getTime() !== b.getTime();\n            }\n            if (isEmpty(a) && isEmpty(b)) {\n                return false;\n            }\n            return a != b;\n        });\n        exec('=', args, function(a, b) {\n            if (a instanceof Date && b instanceof Date) {\n                return a.getTime() === b.getTime();\n            }\n            if (isEmpty(a) && isEmpty(b)) {\n                return true;\n            }\n            if ((a == null && b === 0) || (a === 0 && b == null)) {\n                return true;\n            }\n            if (typeof a === 'string' && typeof b === 'string' && a.toLowerCase() === b.toLowerCase()) {\n                return true;\n            }\n            return a == b;\n        });\n        if (args.length == 1) {\n            if (typeof(args[0].calc) !== 'function') {\n                return args[0];\n            }\n            else {\n                return args[0].calc();\n            }\n        }\n    };\n\n    var last_arg;\n    self.push = function(buffer) {\n        if (buffer) {\n            var v = str_2_val(buffer, formula);\n            if (((v === '=') && (last_arg == '>' || last_arg == '<')) || (last_arg == '<' && v === '>')) {\n                self.args[self.args.length - 1] += v;\n            }\n            else {\n                self.args.push(v);\n            }\n            last_arg = v;\n            //console.log(self.id, '-->', v);\n        }\n    };\n};","\"use strict\";\n\nmodule.exports = function LazyValue(fn) {\n    this.calc = function() {\n        return fn();\n    };\n};\n","\"use strict\";\n\nmodule.exports = function UserFnExecutor(user_function) {\n    var self = this;\n    self.name = 'UserFn';\n    self.args = [];\n    self.calc = function() {\n        var errorValues = {\n            '#NULL!': 0x00,\n            '#DIV/0!': 0x07,\n            '#VALUE!': 0x0F,\n            '#REF!': 0x17,\n            '#NAME?': 0x1D,\n            '#NUM!': 0x24,\n            '#N/A': 0x2A,\n            '#GETTING_DATA': 0x2B\n        }, result;\n        try {\n            result = user_function.apply(self, self.args.map(f=>f.calc()));\n        } catch (e) {\n            if (user_function.name === 'is_blank'\n                && errorValues[e.message] !== undefined) {\n                // is_blank applied to an error cell doesn't propagate the error\n                result = 0;\n            }\n            else if (user_function.name === 'iserror'\n                && errorValues[e.message] !== undefined) {\n                // iserror applied to an error doesn't propagate the error and returns true\n                result = true;\n            }\n            else {\n                throw e;\n            }\n        }\n        return result;\n    };\n    self.push = function(buffer) {\n        self.args.push(buffer);\n    };\n};","\"use strict\";\n\nmodule.exports = function UserRawFnExecutor(user_function, formula) {\n    var self = this;\n    self.name = 'UserRawFn';\n    self.args = [];\n    self.calc = function() {\n        try {\n            return user_function.apply(self, self.args);\n        } catch(e) {\n            // debug\n            // console.log('----------------', user_function);\n            // console.log(formula.name);\n            // console.log(self);\n            throw e;\n        }\n    };\n    self.push = function(buffer) {\n        self.args.push(buffer);\n    };\n};\n","\"use strict\";\n\n// +---------------------+\n// | FORMULAS REGISTERED |\n// +---------------------+\nlet formulas = {\n    'FLOOR': Math.floor,\n    '_xlfn.FLOOR.MATH': Math.floor,\n    'ABS': Math.abs,\n    'SQRT': Math.sqrt,\n    'VLOOKUP': vlookup,\n    'MAX': max,\n    'SUM': sum,\n    'MIN': min,\n    'CONCATENATE': concatenate,\n    'PMT': pmt,\n    'COUNTA': counta,\n    'IRR': irr,\n    'NORM.INV': normsInv,\n    '_xlfn.NORM.INV': normsInv,\n    'STDEV': stDeviation,\n    'AVERAGE': avg,\n    'EXP': EXP,\n    'LN': Math.log,\n    '_xlfn.VAR.P': var_p,\n    'VAR.P': var_p,\n    '_xlfn.COVARIANCE.P': covariance_p,\n    'COVARIANCE.P': covariance_p,\n    'TRIM': trim,\n    'LEN': len,\n    'ISBLANK': is_blank,\n    'HLOOKUP': hlookup,\n    'INDEX': index,\n    'MATCH': match,\n    'SUMPRODUCT': sumproduct,\n    'ISNUMBER': isnumber,\n    'TODAY': today,\n    'ISERROR': iserror,\n    'TIME': time,\n    'DAY': day,\n    'MONTH': month,\n    'YEAR': year,\n    'RIGHT': right,\n    'LEFT': left,\n    'IFS': ifs,\n    'ROUND': round,\n    'CORREL': correl, // missing test\n    'SUMIF': sumif, // missing test,\n    'CHOOSE': choose,\n    'SUBSTITUTE': substitute,\n};\n\nfunction choose(option) {\n    return arguments[option];\n}\n\nfunction sumif(){\n\n    let elementToSum = arguments[1];\n    let sumResult = 0;\n\n    [].slice.call(arguments)[0][0].forEach((elt,key) =>{\n\n        if (elt!==null){\n            if( elt.replace(/\\'/g, \"\") === elementToSum){\n                if (!isNaN([].slice.call(arguments)[2][0][key])){\n                    sumResult += [].slice.call(arguments)[2][0][key]\n                }\n            }\n        }\n    });\n    return sumResult\n}\n\nfunction correl(a,b){\n\n    a = getArrayOfNumbers(a);\n    b = getArrayOfNumbers(b);\n\n    if (a.length !== b.length) {\n        return 'N/D';\n    }\n    var inv_n = 1.0 / (a.length-1);\n    var avg_a = sum.apply(this, a) / a.length;\n    var avg_b = sum.apply(this, b) / b.length;\n    var s = 0.0;\n    var sa = 0;\n    var sb=0;\n    for (var i = 0; i < a.length; i++) {\n        s += (a[i] - avg_a) * (b[i] - avg_b);\n\n        sa+=Math.pow(a[i],2);\n        sb+=Math.pow(b[i],2);\n    }\n\n    sa=Math.sqrt(sa/inv_n);\n    sb=Math.sqrt(sb/inv_n);\n\n    return s / (inv_n*sa*sb);\n}\n\nfunction round(value, decimalPlaces) {\n    if (arguments.length === 0) throw new Error(\"Err:511\");\n    if (arguments.length === 1) return Math.round(value);\n    let roundMeasure = Math.pow(10, decimalPlaces);\n    return Math.round(roundMeasure*value)/roundMeasure\n}\n\nfunction today() {\n    var today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return today;\n}\n\nfunction isnumber(x) {\n    return !isNaN(x);\n}\n\nfunction sumproduct() {\n    var parseNumber = function (string) {\n        if (string === undefined || string === '' || string === null) {\n            return 0;\n        }\n        if (!isNaN(string)) {\n            return parseFloat(string);\n        }\n        return 0;\n    },\n    consistentSizeRanges = function (matrixArray) {\n        var getRowCount = function(matrix) {\n                return matrix.length;\n            },\n            getColCount = function(matrix) {\n                return matrix[0].length;\n            },\n            rowCount = getRowCount(matrixArray[0]),\n            colCount = getColCount(matrixArray[0]);\n\n        for (var i = 1; i < matrixArray.length; i++) {\n            if (getRowCount(matrixArray[i]) !== rowCount\n                || getColCount(matrixArray[i]) !== colCount) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    if (!arguments || arguments.length === 0) {\n        throw Error('#VALUE!');\n    }\n    if (!consistentSizeRanges(arguments)) {\n        throw Error('#VALUE!');\n    }\n    // throw error if any of the cells passed in arguments is in error\n    for (var i = 0; i < arguments.length; i++) {\n        var row = arguments[i];\n        if (Array.isArray(row)) {\n            for (var j = 0; j < row.length; j++) {\n                var col = row[j];\n                if (Array.isArray(col)) {\n                    for (var k = 0; k < col.length; k++) {\n                        var cell = col[k];\n                        if (cell && typeof cell === 'object' && cell.t === 'e') {\n                            throw Error(cell.w);\n                        }\n                    }\n                }\n                else {\n                    var cell = col;\n                    if (cell && typeof cell === 'object' && cell.t === 'e') {\n                        throw Error(cell.w);\n                    }\n                }\n            }\n        }\n        else {\n            var cell = row;\n            if (cell && typeof cell === 'object' && cell.t === 'e') {\n                throw Error(cell.w);\n            }\n        }\n    }\n\n    var arrays = arguments.length + 1;\n    var result = 0;\n    var product;\n    var k;\n    var _i;\n    var _ij;\n    for (var i = 0; i < arguments[0].length; i++) {\n        if (!(arguments[0][i] instanceof Array)) {\n            product = 1;\n            for (k = 1; k < arrays; k++) {\n                _i = parseNumber(arguments[k - 1][i]);\n\n                product *= _i;\n            }\n            result += product;\n        } else {\n            for (var j = 0; j < arguments[0][i].length; j++) {\n                product = 1;\n                for (k = 1; k < arrays; k++) {\n                    _ij = parseNumber(arguments[k - 1][i][j]);\n\n                    product *= _ij;\n                }\n                result += product;\n            }\n        }\n    }\n    return result;\n}\n\nfunction match_less_than_or_equal(matrix, lookupValue) {\n    var index;\n    var indexValue;\n    for (var idx = 0; idx < matrix.length; idx++) {\n        if (matrix[idx] === lookupValue) {\n            return idx + 1;\n        } else if (matrix[idx] < lookupValue) {\n            if (!indexValue) {\n                index = idx + 1;\n                indexValue = matrix[idx];\n            } else if (matrix[idx] > indexValue) {\n                index = idx + 1;\n                indexValue = matrix[idx];\n            }\n        }\n    }\n    if (!index) {\n        throw Error('#N/A');\n    }\n    return index;\n}\n\nfunction match_exactly_string(matrix, lookupValue) {\n    for (var idx = 0; idx < matrix.length; idx++) {\n        lookupValue = lookupValue.replace(/\\?/g, '.');\n        if (Array.isArray(matrix[idx])) {\n            if (matrix[idx].length === 1\n                && typeof matrix[idx][0] === 'string') {\n                    if (matrix[idx][0].toLowerCase() === lookupValue.toLowerCase()) {\n                        return idx + 1;\n                    }\n                }\n        } else if (typeof matrix[idx] === 'string') {\n            if (matrix[idx].toLowerCase() === lookupValue.toLowerCase()) {\n                return idx + 1;\n            }\n        }\n\n    }\n    throw Error('#N/A');\n}\n\nfunction match_exactly_non_string(matrix, lookupValue) {\n    for (var idx = 0; idx < matrix.length; idx++) {\n        if (Array.isArray(matrix[idx])) {\n            if (matrix[idx].length === 1) {\n                if (matrix[idx][0] === lookupValue) {\n                    return idx + 1;\n                }\n            }\n        } else if (matrix[idx] === lookupValue) {\n            return idx + 1;\n        }\n    }\n    throw Error('#N/A');\n}\n\nfunction match_greater_than_or_equal(matrix, lookupValue) {\n    var index;\n    var indexValue;\n    for (var idx = 0; idx < matrix.length; idx++) {\n        if (matrix[idx] === lookupValue) {\n            return idx + 1;\n        } else if (matrix[idx] > lookupValue) {\n            if (!indexValue) {\n                index = idx + 1;\n                indexValue = matrix[idx];\n            } else if (matrix[idx] < indexValue) {\n                index = idx + 1;\n                indexValue = matrix[idx];\n            }\n        }\n    }\n    if (!index) {\n        throw Error('#N/A');\n    }\n    return index;\n}\n\nfunction match(lookupValue, matrix, matchType) {\n    if (Array.isArray(matrix)\n        && matrix.length === 1\n        && Array.isArray(matrix[0])) {\n        matrix = matrix[0];\n    }\n    if (!lookupValue && !matrix) {\n        throw Error('#N/A');\n    }\n    if (arguments.length === 2) {\n        matchType = 1;\n    }\n    if (!(matrix instanceof Array)) {\n        throw Error('#N/A');\n    }\n    if (matchType === 0) {\n        if (typeof lookupValue === 'string') {\n            return match_exactly_string(matrix, lookupValue);\n        } else {\n            return match_exactly_non_string(matrix, lookupValue);\n        }\n    } else if (matchType === 1) {\n        return match_less_than_or_equal(matrix, lookupValue);\n    } else if (matchType === -1) {\n        return match_greater_than_or_equal(matrix, lookupValue);\n    } else {\n        throw Error('#N/A');\n    }\n}\n\nfunction index(matrix, row_num, column_num) {\n    if (row_num <= matrix.length) {\n        var row = matrix[row_num - 1];\n        if (Array.isArray(row)) {\n            if (!column_num) {\n                return row;\n            } else if (column_num <= row.length) {\n                return row[column_num - 1];\n            }\n        } else {\n            return matrix[row_num];\n        }\n    }\n    throw Error('#REF!');\n}\n\n// impl ported from https://github.com/FormulaPages/hlookup\nfunction hlookup(needle, table, index, exactmatch) {\n    if (typeof needle === \"undefined\" || (0, is_blank)(needle)) {\n        throw Error('#N/A');\n    }\n\n    index = index || 0;\n    let row = table[0], i, searchingFor;\n\n    if (typeof needle === 'string') {\n        searchingFor = needle.toLowerCase();\n        for (i = 0; i < row.length; i++) {\n            if (exactmatch && row[i] === searchingFor || row[i].toLowerCase().indexOf(searchingFor) !== -1) {\n                return index < table.length + 1 ? table[index - 1][i] : table[0][i];\n            }\n        }\n    } else {\n        searchingFor = needle;\n        for (i = 0; i < row.length; i++) {\n            if (exactmatch && row[i] === searchingFor || row[i] === searchingFor) {\n                return index < table.length + 1 ? table[index - 1][i] : table[0][i];\n            }\n        }\n    }\n    throw Error('#N/A');\n}\n\nfunction len(a) {\n    return ('' + a).length;\n}\n\nfunction trim(a) {\n    return ('' + a).trim();\n}\n\nfunction is_blank(a) {\n    console.log(a)\n    return !a;\n}\n\nfunction covariance_p(a, b) {\n    a = getArrayOfNumbers(a);\n    b = getArrayOfNumbers(b);\n    if (a.length != b.length) {\n        return 'N/D';\n    }\n    var inv_n = 1.0 / a.length;\n    var avg_a = sum.apply(this, a) / a.length;\n    var avg_b = sum.apply(this, b) / b.length;\n    var s = 0.0;\n    for (var i = 0; i < a.length; i++) {\n        s += (a[i] - avg_a) * (b[i] - avg_b);\n    }\n    return s * inv_n;\n}\n\nfunction getArrayOfNumbers(range) {\n    var arr = [];\n    for (var i = 0; i < range.length; i++) {\n        var arg = range[i];\n        if (Array.isArray(arg)) {\n            var matrix = arg;\n            for (var j = matrix.length; j--;) {\n                if (typeof(matrix[j]) == 'number') {\n                    arr.push(matrix[j]);\n                }\n                else if (Array.isArray(matrix[j])) {\n                    for (var k = matrix[j].length; k--;) {\n                        if (typeof(matrix[j][k]) == 'number') {\n                            arr.push(matrix[j][k]);\n                        }\n                    }\n                }\n                // else {\n                //   wtf is that?\n                // }\n            }\n        }\n        else {\n            if (typeof(arg) == 'number') {\n                arr.push(arg);\n            }\n        }\n    }\n    return arr;\n}\n\nfunction var_p() {\n    var average = avg.apply(this, arguments);\n    var s = 0.0;\n    var c = 0;\n    for (var i = 0; i < arguments.length; i++) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var matrix = arg;\n            for (var j = matrix.length; j--;) {\n                for (var k = matrix[j].length; k--;) {\n                    if (matrix[j][k] !== null && matrix[j][k] !== undefined) {\n                        s += Math.pow(matrix[j][k] - average, 2);\n                        c++;\n                    }\n                }\n            }\n        }\n        else {\n            s += Math.pow(arg - average, 2);\n            c++;\n        }\n    }\n    return s / c;\n}\n\nfunction EXP(n) {\n    return Math.pow(Math.E, n);\n}\n\nfunction avg() {\n    return sum.apply(this, arguments) / counta.apply(this, arguments);\n}\n\nfunction stDeviation() {\n    var array = getArrayOfNumbers(arguments);\n\n    function _mean(array) {\n        return array.reduce(function(a, b) {\n            return a + b;\n        }) / array.length;\n    }\n    var mean = _mean(array),\n        dev = array.map(function(itm) {\n            return (itm - mean) * (itm - mean);\n        });\n    return Math.sqrt(dev.reduce(function(a, b) {\n        return a + b;\n    }) / (array.length - 1));\n}\n\n/// Original C++ implementation found at http://www.wilmott.com/messageview.cfm?catid=10&threadid=38771\n/// C# implementation found at http://weblogs.asp.net/esanchez/archive/2010/07/29/a-quick-and-dirty-implementation-of-excel-norminv-function-in-c.aspx\n/*\n *     Compute the quantile function for the normal distribution.\n *\n *     For small to moderate probabilities, algorithm referenced\n *     below is used to obtain an initial approximation which is\n *     polished with a final Newton step.\n *\n *     For very large arguments, an algorithm of Wichura is used.\n *\n *  REFERENCE\n *\n *     Beasley, J. D. and S. G. Springer (1977).\n *     Algorithm AS 111: The percentage points of the normal distribution,\n *     Applied Statistics, 26, 118-121.\n *\n *      Wichura, M.J. (1988).\n *      Algorithm AS 241: The Percentage Points of the Normal Distribution.\n *      Applied Statistics, 37, 477-484.\n */\nfunction normsInv(p, mu, sigma) {\n    if (p < 0 || p > 1) {\n        throw \"The probality p must be bigger than 0 and smaller than 1\";\n    }\n    if (sigma < 0) {\n        throw \"The standard deviation sigma must be positive\";\n    }\n\n    if (p == 0) {\n        return -Infinity;\n    }\n    if (p == 1) {\n        return Infinity;\n    }\n    if (sigma == 0) {\n        return mu;\n    }\n\n    var q, r, val;\n\n    q = p - 0.5;\n\n    /*-- use AS 241 --- */\n    /* double ppnd16_(double *p, long *ifault)*/\n    /*      ALGORITHM AS241  APPL. STATIST. (1988) VOL. 37, NO. 3\n            Produces the normal deviate Z corresponding to a given lower\n            tail area of P; Z is accurate to about 1 part in 10**16.\n    */\n    if (Math.abs(q) <= .425) { /* 0.075 <= p <= 0.925 */\n        r = .180625 - q * q;\n        val =\n            q * (((((((r * 2509.0809287301226727 +\n                            33430.575583588128105) * r + 67265.770927008700853) * r +\n                        45921.953931549871457) * r + 13731.693765509461125) * r +\n                    1971.5909503065514427) * r + 133.14166789178437745) * r +\n                3.387132872796366608) / (((((((r * 5226.495278852854561 +\n                        28729.085735721942674) * r + 39307.89580009271061) * r +\n                    21213.794301586595867) * r + 5394.1960214247511077) * r +\n                687.1870074920579083) * r + 42.313330701600911252) * r + 1);\n    }\n    else { /* closer than 0.075 from {0,1} boundary */\n\n        /* r = min(p, 1-p) < 0.075 */\n        if (q > 0)\n            r = 1 - p;\n        else\n            r = p;\n\n        r = Math.sqrt(-Math.log(r));\n        /* r = sqrt(-log(r))  <==>  min(p, 1-p) = exp( - r^2 ) */\n\n        if (r <= 5) { /* <==> min(p,1-p) >= exp(-25) ~= 1.3888e-11 */\n            r += -1.6;\n            val = (((((((r * 7.7454501427834140764e-4 +\n                                .0227238449892691845833) * r + .24178072517745061177) *\n                            r + 1.27045825245236838258) * r +\n                        3.64784832476320460504) * r + 5.7694972214606914055) *\n                    r + 4.6303378461565452959) * r +\n                1.42343711074968357734) / (((((((r *\n                                1.05075007164441684324e-9 + 5.475938084995344946e-4) *\n                            r + .0151986665636164571966) * r +\n                        .14810397642748007459) * r + .68976733498510000455) *\n                    r + 1.6763848301838038494) * r +\n                2.05319162663775882187) * r + 1);\n        }\n        else { /* very close to  0 or 1 */\n            r += -5;\n            val = (((((((r * 2.01033439929228813265e-7 +\n                                2.71155556874348757815e-5) * r +\n                            .0012426609473880784386) * r + .026532189526576123093) *\n                        r + .29656057182850489123) * r +\n                    1.7848265399172913358) * r + 5.4637849111641143699) *\n                r + 6.6579046435011037772) / (((((((r *\n                            2.04426310338993978564e-15 + 1.4215117583164458887e-7) *\n                        r + 1.8463183175100546818e-5) * r +\n                    7.868691311456132591e-4) * r + .0148753612908506148525) * r + .13692988092273580531) * r +\n                .59983220655588793769) * r + 1);\n        }\n\n        if (q < 0.0) {\n            val = -val;\n        }\n    }\n\n    return mu + sigma * val;\n}\n\nfunction irr(range, guess) {\n    var min = -2.0;\n    var max = 1.0;\n    var n = 0;\n    do {\n        var guest = (min + max) / 2;\n        var NPV = 0;\n        for (var i = 0; i < range.length; i++) {\n            var arg = range[i];\n            NPV += arg[0] / Math.pow((1 + guest), i);\n        }\n        if (NPV > 0) {\n            if (min === max) {\n                max += Math.abs(guest);\n            }\n            min = guest;\n        }\n        else {\n            max = guest;\n        }\n        n++;\n    } while (Math.abs(NPV) > 0.000001 && n < 100000);\n    //console.log(n);\n    return guest;\n}\n\nfunction counta() {\n    var r = 0;\n    for (var i = arguments.length; i--;) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var matrix = arg;\n            for (var j = matrix.length; j--;) {\n                for (var k = matrix[j].length; k--;) {\n                    if (matrix[j][k] !== null && matrix[j][k] !== undefined) {\n                        r++;\n                    }\n                }\n            }\n        }\n        else {\n            if (arg !== null && arg !== undefined) {\n                r++;\n            }\n        }\n    }\n    return r;\n}\n\nfunction pmt(rate_per_period, number_of_payments, present_value, future_value, type) {\n    type = type || 0;\n    future_value = future_value || 0;\n    if (rate_per_period != 0.0) {\n        // Interest rate exists\n        var q = Math.pow(1 + rate_per_period, number_of_payments);\n        return -(rate_per_period * (future_value + (q * present_value))) / ((-1 + q) * (1 + rate_per_period * (type)));\n\n    }\n    else if (number_of_payments != 0.0) {\n        // No interest rate, but number of payments exists\n        return -(future_value + present_value) / number_of_payments;\n    }\n    return 0;\n}\n\nfunction concatenate() {\n    var r = '';\n    for (var i = 0; i < arguments.length; i++) {\n        var arg = arguments[i];\n        if (arg === null || arg === undefined) continue;\n        r += arg;\n    }\n    return r;\n}\n\nfunction sum() {\n    var r = 0;\n    for (var i = arguments.length; i--;) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var matrix = arg;\n            for (var j = matrix.length; j--;) {\n                for (var k = matrix[j].length; k--;) {\n                    if (!isNaN(matrix[j][k])) {\n                        r += +matrix[j][k];\n                    }\n                }\n            }\n        }\n        else {\n            r += +arg;\n        }\n    }\n    return r;\n}\n\nfunction max() {\n    var max = null;\n    for (var i = arguments.length; i--;) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var arr = arg;\n            for (var j = arr.length; j--;) {\n                var col = arr[j];\n                if (Array.isArray(col)) {\n                    for (var k = col.length; k--;) {\n                        if (max == null || (col[k] != null && max < col[k])) {\n                            max = col[k];\n                        }\n                    }\n                }\n                else if (max == null || (col != null && max < col)) {\n                    max = col;\n                }\n            }\n        }\n        else if (!isNaN(arg) && (max == null || (arg != null && max < arg))) {\n            max = arg;\n        }\n    }\n    return max;\n}\n\nfunction min() {\n    var min = null;\n    for (var i = arguments.length; i--;) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var arr = arg;\n            for (var j = arr.length; j--;) {\n                var col = arr[j];\n                if (Array.isArray(col)) {\n                    for (var k = col.length; k--;) {\n                        if (min == null || (col[k] != null && min > col[k])) {\n                            min = col[k];\n                        }\n                    }\n                }\n                else if (min == null || (col != null && min > col)) {\n                    min = col;\n                }\n            }\n        }\n        else if (!isNaN(arg) && (min == null || (arg != null && min > arg))) {\n            min = arg;\n        }\n    }\n    return min;\n}\n\nfunction vlookup(key, matrix, return_index) {\n    for (var i = 0; i < matrix.length; i++) {\n        if (matrix[i][0] == key) {\n            return matrix[i][return_index - 1];\n        }\n    }\n    throw Error('#N/A');\n}\n\nfunction iserror() {\n    // if an error is catched before getting there, true will be returned from the catch block\n    // if we get here then it's not an error\n    return false;\n}\n\nfunction time(hours, minutes, seconds) {\n    const MS_PER_DAY = 24 * 60 * 60 * 1000;\n    return ((hours * 60 + minutes) * 60 + seconds) * 1000 / MS_PER_DAY;\n}\n\nfunction day(date) {\n    if (!date.getDate) {\n        throw Error('#VALUE!');\n    }\n    var day = date.getDate();\n    if (isNaN(day)) {\n        throw Error('#VALUE!');\n    }\n    return day;\n}\n\nfunction month(date) {\n    if (!date.getMonth) {\n        throw Error('#VALUE!');\n    }\n    var month = date.getMonth();\n    if (isNaN(month)) {\n        throw Error('#VALUE!');\n    }\n    return month + 1;\n}\n\nfunction year(date) {\n    if (!date.getFullYear) {\n        throw Error('#VALUE!');\n    }\n    var year = date.getFullYear();\n    if (isNaN(year)) {\n        throw Error('#VALUE!');\n    }\n    return year;\n}\n\nfunction right(text, number) {\n    number = (number === undefined) ? 1 : parseFloat(number);\n\n    if (isNaN(number)) {\n        throw Error('#VALUE!');\n    }\n    if (text === undefined || text === null) {\n        text = '';\n    } else {\n        text = '' + text;\n    }\n    return text.substring(text.length - number);\n}\n\nfunction left(text, number) {\n    number = (number === undefined) ? 1 : parseFloat(number);\n\n    if (isNaN(number)) {\n        throw Error('#VALUE!');\n    }\n    if (text === undefined || text === null) {\n        text = '';\n    } else {\n        text = '' + text;\n    }\n    return text.substring(0, number);\n}\n\nfunction ifs(/*_cond1, _val1, _cond2, _val2, _cond3, _val3, ... */) {\n    for (var i = 0; i + 1 < arguments.length; i+=2) {\n        var cond = arguments[i];\n        var val = arguments[i+1];\n        if (cond) {\n            return val;\n        }\n    }\n    throw Error('#N/A');\n}\n\nfunction substitute(text, old_text, new_text, occurrence) {\n    if(occurrence <= 0) {\n      throw Error('#VALUE!');\n    }  \n    if (!text || !old_text || (!new_text && new_text !== '')) {\n      return text;\n    } else if (occurrence === undefined) {\n      return text.replace(new RegExp(old_text, 'g'), new_text);\n    } else {\n      var index = 0;\n      var i = 0;\n      while (text.indexOf(old_text, index) > 0) {\n        index = text.indexOf(old_text, index + 1);\n        i++;\n        if (i === occurrence) {\n          return text.substring(0, index) + new_text + text.substring(index + old_text.length);\n        }\n      }\n    }\n  };\n\nmodule.exports = formulas;\n","\"use strict\";\n\nconst int_2_col_str = require('./int_2_col_str.js');\nconst col_str_2_int = require('./col_str_2_int.js');\nconst RawValue = require('./RawValue.js');\nconst Range = require('./Range.js');\nconst RefValue = require('./RefValue.js');\n\nfunction raw_offset(cell_ref, rows, columns, height, width) {\n    height = (height || new RawValue(1)).calc();\n    width = (width || new RawValue(1)).calc();\n    if (cell_ref.args.length === 1 && cell_ref.args[0].name === 'RefValue') {\n        var ref_value = cell_ref.args[0];\n        var parsed_ref = ref_value.parseRef();\n        var col = col_str_2_int(parsed_ref.cell_name) + columns.calc();\n        var col_str = int_2_col_str(col);\n        var row = +parsed_ref.cell_name.replace(/^[A-Z]+/g, '') + rows.calc();\n        var cell_name = col_str + row;\n        if (height === 1 && width === 1) {\n            return new RefValue(cell_name, ref_value.formula).calc();\n        }\n        else {\n            var end_range_col = int_2_col_str(col + width - 1);\n            var end_range_row = row + height - 1;\n            var end_range = end_range_col + end_range_row;\n            var str_expression = parsed_ref.sheet_name + '!' + cell_name + ':' + end_range;\n            return new Range(str_expression, ref_value.formula).calc();\n        }\n    }\n}\n\nfunction iferror(cell_ref, onerrorvalue) {\n    try {\n        var value = cell_ref.calc();\n        if (typeof value === 'number' && (isNaN(value) || value === Infinity || value === -Infinity)) {\n            return onerrorvalue.calc();\n        }\n        return value;\n    } catch(e) {\n        return onerrorvalue.calc();\n    }\n}\n\nfunction _if(condition, _then, _else) {\n    if (condition.calc()) {\n        // console.log(condition.formula.name)\n        // if (condition.formula.name === 'P40') {\n        //     console.log('P40 =', _then.calc());\n        //     console.log(' -->', _then.args[1].calc());\n        // }\n        return _then.calc();\n    }\n    else {\n        if (typeof _else === 'undefined') {\n            return false;\n        } else {\n            return _else.calc();\n        }\n    }\n}\n\nfunction and() {\n    for (var i = 0; i < arguments.length; i++) {\n        if(!arguments[i].calc()) return false;\n    }\n    return true;\n}\n\nfunction _or() {\n    for (var i = 0; i < arguments.length; i++) {\n        if(arguments[i].calc()) return true;\n    }\n    return false;\n}\n\nfunction transpose(expressionWithRange) {\n    let range = expressionWithRange.args[0];\n    // console.log(expressionWithRange.args[0])\n    // console.log(expressionWithRange.formula.wb.Sheets.Sheet1)\n    // console.log(range.calc())\n    let matrix = range.calc();\n    let cellName = expressionWithRange.formula.name;\n    let colRow = cellName.match(/([A-Z]+)([0-9]+)/);\n    let sheet = expressionWithRange.formula.sheet;\n    // console.log(colRow[1], colRow[2]);\n    // console.log(col_str_2_int(colRow[1]));\n    let colNumber = col_str_2_int(colRow[1]);\n    let rowNumber = +colRow[2];\n    for (let i = 0; i < matrix.length; i++) {\n        let matrixRow = matrix[i];\n        for (let j = 0; j < matrixRow.length; j++) {\n            let destinationColumn = colNumber + i;\n            let destinationRow = rowNumber + j;\n            let value = matrixRow[j];\n            // console.log(int_2_col_str(destinationColumn), destinationRow, value);\n            sheet[int_2_col_str(destinationColumn) + destinationRow].v = value;\n        }\n    }\n    // console.log(expressionWithRange.formula.name)\n    return matrix[0][0];\n}\n\nmodule.exports = {\n    'OFFSET': raw_offset,\n    'IFERROR': iferror,\n    'IF': _if,\n    'AND': and,\n    'OR': _or,\n    'TRANSPOSE': transpose\n};\n","\"use strict\";\n\nconst RawValue = require('./RawValue.js');\nconst str_2_val = require('./str_2_val.js');\nconst find_all_cells_with_formulas = require('./find_all_cells_with_formulas.js');\n\nclass Calculator {\n    \n    constructor(workbook, exec_formula) {\n        this.workbook = workbook;\n        this.expressions = [];\n        this.exec_formula = exec_formula;\n        this.variables = {};\n        this.formulas = find_all_cells_with_formulas(workbook, exec_formula);\n        for (let i = this.formulas.length - 1; i >= 0; i--) {\n            let exp = exec_formula.build_expression(this.formulas[i]);\n            this.expressions.push(exp);\n        }\n        this.calcNames();\n    }\n    \n    setVar(var_name, value) {\n        let variable = this.variables[var_name];\n        if (variable) {\n            variable.setValue(value);\n        } else {\n            this.expressions.forEach(exp => {\n                this.setVarOfExpression(exp, var_name, value);\n            });\n        }\n    }\n    \n    getVars() {\n        let vars = {};\n        for (let k in this.variables) {\n            vars[k] = this.variables[k].calc();\n        }\n        return vars;\n    }\n    \n    calcNames() {\n        if (!this.workbook || !this.workbook.Workbook || !this.workbook.Workbook.Names) {\n            return;\n        }\n        this.workbook.Workbook.Names.forEach(item => {\n            let val = this.getRef(item.Ref);\n            this.variables[item.Name] = val;\n            this.expressions.forEach(exp => {\n                this.setVarOfExpression(exp, item.Name);\n            });\n        });\n    }\n    \n    getRef(ref_name) {\n        if (!this.formulas.length) {\n            throw new Error(\"No formula found.\");\n        }\n        let first_formula = this.formulas[0];\n        let formula_ref = first_formula.formula_ref;\n        let formula = {\n            formula_ref: formula_ref,\n            wb: this.workbook,\n            exec_formula: this.exec_formula\n        };\n        return str_2_val(ref_name, formula);\n    }\n    \n    setVarOfExpression(exp, var_name, value) {\n        for (let i = 0; i < exp.args.length; i++) {\n            let arg = exp.args[i];\n            if (arg === var_name) {\n                exp.args[i] = this.variables[var_name] || (this.variables[var_name] = new RawValue(value));\n            } else if (typeof arg === 'object' && (arg.name === 'Expression' || arg.name === 'UserFn')) {\n                this.setVarOfExpression(arg, var_name, value);\n            }\n        }\n    }\n    \n    execute() {\n        this.expressions.forEach(exp => {\n            exp.update_cell_value();\n        });\n    }\n}\n\nmodule.exports = Calculator;"],"sourceRoot":""}